<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- Version von Maven -->
    <modelVersion>4.0.0</modelVersion>

    <!-- Grundangaben zum Maven-Projekt, Versionsnummer (hinterste Ziffer) jedesmal 
    um 1 erhöhen, wenn etwas ändert. Die ersten zwei Ziffern entsprechen Spring 
    Boot-Versionsnummer -->
    <groupId>ch.zhaw.gpi</groupId>
    <artifactId>eumzug-plattform-2018</artifactId>
    <name>eUmzug Plattform 2018</name>
    <version>3.3.5</version>

    <!-- Konfiguration des Maven-Projekts -->
    <properties>
        <!-- Nicht bloss ANSI, sondern UTF-8 soll unterstützt sein -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Setzt die Spring Boot-Starter-Version auf 3.0.0, was Camunda 7.9 enthält -->
        <camunda-bpm-spring-boot-starter.version>3.2.0</camunda-bpm-spring-boot-starter.version>
        <spring.boot.version>2.1.1.RELEASE</spring.boot.version>
        <camunda.version>7.10.1</camunda.version>

        <!-- Steuert, ob die Enterprise-Version von Camunda benutzt wird ("-ee" schreiben
             oder die Community-Version (leer lassen). Weitere Bedingungen:
             1. Eine Datei camunda-license.txt mit einem gültigen Key muss in
                src/main/resources abgelegt sein (nicht committen!!!).
             2. Es sind Credentials zum Camunda-EE-Repository erforderlich (siehe ganz unten) -->
        <camunda.enable.ee>-ee</camunda.enable.ee>

        <!-- Es sind keine Tests erforderlich -->
        <skipTests>true</skipTests>
    </properties>

    <!-- Setzt Spring Boot als massgebend für die Verwaltung der Abhängigkeiten in Maven -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- Legt die einzelnen Abhängigkeiten des Maven-Projekts fest -->
    <dependencies>
        <!-- Importiert eine für die Spring Boot-Umgebung konfigurierte Camunda-
        Umgebung, beinhaltend: Spring-Framework, Tomcat-Server, Camunda Process
        Engine, Camunda Webapps (Tasklist, Cockpit, Admin), Camunda Spin
        https://mvnrepository.com/artifact/org.camunda.bpm.springboot/camunda-bpm-spring-boot-starter-webapp/3.0.0
        
        Allerdings werden angepasste Webapps benötigt (z.B. Übersetzung auf Deutsch,
        anderes Logo, usw.). Damit dies funktioniert, ist das Webjar-Artifakt nicht
        vom Spring Boot Starter-Projekt zu nehmen (exclusion), sondern das eigene
        angepasste Webjar-Projekt zu verwenden (be-services-webapp-webjar(-ee).
        Details hierzu in https://github.com/zhaw-gpi/be-services-plattform
        -->
        <dependency>
            <groupId>org.camunda.bpm.springboot</groupId>
            <artifactId>camunda-bpm-spring-boot-starter-webapp${camunda.enable.ee}</artifactId>
            <version>${camunda-bpm-spring-boot-starter.version}</version>

            <exclusions>
                <exclusion>
                    <groupId>org.camunda.bpm.webapp</groupId>
                    <artifactId>camunda-webapp-webjar${camunda.enable.ee}</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>ch.zhaw.gpi</groupId>
            <artifactId>be-services-webapp-webjar</artifactId>
            <version>${camunda.version}${camunda.enable.ee}</version>
        </dependency>

        <dependency>
            <groupId>org.camunda.bpm.springboot</groupId>
            <artifactId>camunda-bpm-spring-boot-starter-rest</artifactId>
            <version>${camunda-bpm-spring-boot-starter.version}</version>
        </dependency>

        <dependency>
            <groupId>org.camunda.bpm.springboot</groupId>
            <artifactId>camunda-bpm-spring-boot-starter-test</artifactId>
            <version>${camunda-bpm-spring-boot-starter.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web-services</artifactId>
        </dependency>

        <dependency>
            <groupId>org.camunda.spin</groupId>
            <artifactId>camunda-spin-core</artifactId>
            <version>1.7.1</version>
        </dependency>

        <dependency>
            <groupId>org.camunda.spin</groupId>
            <artifactId>camunda-spin-dataformat-json-jackson</artifactId>
            <version>1.7.1</version>
        </dependency>

        <dependency>
            <groupId>org.camunda.bpm</groupId>
            <artifactId>camunda-engine-plugin-spin</artifactId>
            <version>7.11.0</version>
        </dependency>

        <!-- Import den Stripe Java-Client -->
        <dependency>
            <groupId>com.stripe</groupId>
            <artifactId>stripe-java</artifactId>
            <version>12.1.0</version>
        </dependency>

        <!-- In OpenJDK ist die folgende für die XML-Verarbeitung erforderliche 
            Bibliothek nicht mehr standardmässig dabei -->
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>2.3.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
                <configuration>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Ohne die folgende Angaben versucht Maven mit JDK 5 zu kompilieren -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>

            <!-- 
            ***
            * Das JAXB2-Plugin ist erforderlich, um aus den im WSDL enthaltenen
            * Schema Definitions für JAX-WS annotierte Java-Klassen zu generieren.
            * Die Dokumentation befindet sich in https://github.com/highsource/maven-jaxb2-plugin
            ***
            -->
            <plugin>
                <groupId>org.jvnet.jaxb2.maven2</groupId>
                <artifactId>maven-jaxb2-plugin</artifactId>
                <version>0.14.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <schemaLanguage>WSDL</schemaLanguage>
                    <schemas>
                        <schema>
                            <url>http://localhost:8090/soap/GebaeudeUndWohnungsRegisterService?wsdl</url>
                        </schema>
                        <schema>
                            <url>http://localhost:8083/soap/PersonenRegisterService?wsdl</url>
                        </schema>
                    </schemas>
                    <generateDirectory>target/generated-sources/classes-from-wsdl</generateDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- Damit auch die neuesten Patches der Camunda-Komponenten verfügbar sind, sollen
         die Komponenten nicht vom allgemeinen Maven-Repository https://mvnrepository.com
         geladen werden, sondern von den bei Camunda gehosteten Nexus-Repositories.
         Diese gibt es einerseits für die Community Edition (camunda-bpm-nexus) und
         für die Enterprise Edition (camunda-bpm-ee). Die Community Repository funktioniert
         out-of-the-box, da öffentlich zugänglich.

         Die Enterprise Repository benötigt
         hingegen Zugangsdaten, welche in einer Datei settings.xml im .m2-Verzeichnis
         eingefügt werden. Das .m2-Verzeichnis befindet sich auf einem Windows 10-
         Rechner in C:\Users\BENUTZERNAME\.m2. Der Inhalt von settings.xml sollte sein:
         <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
             <server>
                <id>camunda-bpm-ee</id>
                <username>BENUTZERNAME</username>
                <password>PASSWORT</password>
             </server>
            </servers>
           </settings> 
    -->
    <repositories>
        <repository>
            <id>camunda-bpm-ee</id>
            <name>camunda-bpm-ee</name>
            <url>https://app.camunda.com/nexus/content/repositories/camunda-bpm-ee</url>
        </repository>
    </repositories>
</project>